import{createRequire as e}from"module";var n={n:e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return n.d(r,{a:r}),r},d:(e,r)=>{for(var t in r)n.o(r,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};const r=e(import.meta.url)("http");var t=n.n(r);const i=e(import.meta.url)("crypto");var o=n.n(i);const a={randomUUID:o().randomUUID},s=new Uint8Array(256);let d=s.length;function p(){return d>s.length-16&&(o().randomFillSync(s),d=0),s.slice(d,d+=16)}const l=[];for(let e=0;e<256;++e)l.push((e+256).toString(16).slice(1));const c=function(e,n,r){if(a.randomUUID&&!n&&!e)return a.randomUUID();const t=(e=e||{}).random||(e.rng||p)();if(t[6]=15&t[6]|64,t[8]=63&t[8]|128,n){r=r||0;for(let e=0;e<16;++e)n[r+e]=t[e];return n}return function(e,n=0){return l[e[n+0]]+l[e[n+1]]+l[e[n+2]]+l[e[n+3]]+"-"+l[e[n+4]]+l[e[n+5]]+"-"+l[e[n+6]]+l[e[n+7]]+"-"+l[e[n+8]]+l[e[n+9]]+"-"+l[e[n+10]]+l[e[n+11]]+l[e[n+12]]+l[e[n+13]]+l[e[n+14]]+l[e[n+15]]}(t)},f=e(import.meta.url)("url");var u=n.n(f);let y=[];const g=e=>null!==e.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/),m=e=>y.find((n=>n.id===e)),S=t().createServer((async(e,n)=>{try{const r=u().parse(e.url||"",!0),{pathname:t}=r;if("GET"===e.method&&"/api/users"===t){const e=y;n.writeHead(200,{"Content-Type":"application/json"}),n.end(JSON.stringify(e))}else if("GET"===e.method&&t&&t.startsWith("/api/users")){const e=`${t.slice(11)}`;if(!g(e))return n.writeHead(400,{"Content-Type":"application/json"}),void n.end(JSON.stringify({error:"Invalid userId format"}));const r=m(e);r?(n.writeHead(200,{"Content-Type":"application/json"}),n.end(JSON.stringify(r))):(n.writeHead(404,{"Content-Type":"application/json"}),n.end(JSON.stringify({error:"User not found"})))}else if("POST"===e.method&&"/api/users"===t){let r="";e.on("data",(e=>{r+=e.toString()})),e.on("end",(async()=>{try{const e=JSON.parse(r);if(!(e.username&&"string"==typeof e.username&&e.age&&"number"==typeof e.age&&e.hobbies&&Array.isArray(e.hobbies)))return n.writeHead(400,{"Content-Type":"application/json"}),void n.end(JSON.stringify({error:"Missing or invalid required fields"}));const t={id:c(),username:e.username,age:e.age,hobbies:e.hobbies};y.push(t),n.writeHead(201,{"Content-Type":"application/json"}),n.end(JSON.stringify(t))}catch(e){n.writeHead(400,{"Content-Type":"application/json"}),n.end(JSON.stringify({error:"Invalid JSON format"}))}}))}else if("PUT"===e.method&&t&&t.startsWith("/api/users")){const r=t.slice(11);if(!g(r))return n.writeHead(400,{"Content-Type":"application/json"}),void n.end(JSON.stringify({error:"Invalid userId format"}));if(!m(r))return n.writeHead(404,{"Content-Type":"application/json"}),void n.end(JSON.stringify({error:"User not found"}));let i="";e.on("data",(e=>{i+=e.toString()})),e.on("end",(()=>{try{const e=JSON.parse(i);if(!(e=>"object"==typeof e&&e.username&&"string"==typeof e.username&&e.age&&"number"==typeof e.age&&e.hobbies&&Array.isArray(e.hobbies))(e))return n.writeHead(400,{"Content-Type":"application/json"}),void n.end(JSON.stringify({error:"Missing or invalid required fields"}));const t=((e,n)=>{const r=y.findIndex((n=>n.id===e));return-1!==r?(y[r]={...y[r],username:n.username||y[r].username,age:n.age||y[r].age,hobbies:n.hobbies||y[r].hobbies},y[r]):null})(r,e);n.writeHead(200,{"Content-Type":"application/json"}),n.end(JSON.stringify(t))}catch(e){n.writeHead(400,{"Content-Type":"application/json"}),n.end(JSON.stringify({error:"Invalid JSON format"}))}}))}else if("DELETE"===e.method&&t&&t.startsWith("/api/users")){const e=t.slice(11);if(!g(e))return n.writeHead(400,{"Content-Type":"application/json"}),void n.end(JSON.stringify({error:"Invalid userId format"}));if(!m(e))return n.writeHead(404,{"Content-Type":"application/json"}),void n.end(JSON.stringify({error:"User not found"}));(e=>{y=y.filter((n=>n.id!==e))})(e),n.writeHead(204,{"Content-Type":"application/json"}),n.end(JSON.stringify({message:"User deleted successfully"}))}else n.writeHead(404,{"Content-Type":"application/json"}),n.end(JSON.stringify({error:"Not Found"}))}catch(e){console.error("Server Error:",e),n.writeHead(500,{"Content-Type":"application/json"}),n.end(JSON.stringify({error:"Internal Server Error"}))}})),h=process.env.PORT||4e3;S.listen(h,(()=>{console.log(`Server is listening on port ${h}`)}));